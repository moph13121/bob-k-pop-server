// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bob_api.Data;

#nullable disable

namespace bob_api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
            {
                b.Property<Guid>("CategoriesId")
                    .HasColumnType("uuid");

                b.Property<Guid>("ProductsId")
                    .HasColumnType("uuid");

                b.HasKey("CategoriesId", "ProductsId");

                b.HasIndex("ProductsId");

                b.ToTable("product_categories", (string)null);
            });

            modelBuilder.Entity("bob_api.Models.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.ToTable("Category");

                b.HasData(
                    new
                    {
                        Id = new Guid("79400b3c-26e9-4150-898a-2d6f881421b9"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8126),
                        Name = "Girl",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8127)
                    },
                    new
                    {
                        Id = new Guid("c75bd07e-0c1f-4291-b622-017823f1868c"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8093),
                        Name = "Boy",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8095)
                    },
                    new
                    {
                        Id = new Guid("b1a5f6f5-d279-4c56-b03c-af1706dba170"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8128),
                        Name = "BTS",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8128)
                    },
                    new
                    {
                        Id = new Guid("084629ac-cf01-4f98-b6ed-d4c5cb56c00f"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8129),
                        Name = "StrayKids",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8129)
                    },
                    new
                    {
                        Id = new Guid("c998a3af-bc7a-4f3b-a3e2-56960edf62e8"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8130),
                        Name = "BigBang",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8131)
                    },
                    new
                    {
                        Id = new Guid("f2105153-8a61-48c0-aceb-a3ccf9a5ca4f"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8132),
                        Name = "Ateez",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8132)
                    },
                    new
                    {
                        Id = new Guid("4bea4590-2f31-4457-857e-0191907f7c7b"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8133),
                        Name = "Blackpink",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8133)
                    },
                    new
                    {
                        Id = new Guid("535823a1-a387-4bac-ae86-d19bb6cc86c2"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8134),
                        Name = "Red Velvet",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8134)
                    },
                    new
                    {
                        Id = new Guid("62dc179f-73c1-4b51-a71a-38f51063d3e9"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8135),
                        Name = "LE SSERAFIM.",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8135)
                    },
                    new
                    {
                        Id = new Guid("dc477ed9-43c9-4ede-82b4-b23892ada3d6"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8137),
                        Name = "(G)I-DLE.",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8138)
                    },
                    new
                    {
                        Id = new Guid("4700fdb8-e263-4453-9adc-d4683e05c1c3"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8138),
                        Name = "LightStick",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8139)
                    },
                    new
                    {
                        Id = new Guid("9aa924f8-6583-4197-a68a-4f5f166b67db"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8140),
                        Name = "Jewelry",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8140)
                    },
                    new
                    {
                        Id = new Guid("3dc941fe-38bb-4366-a44e-aeca8027ef5c"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8141),
                        Name = "Merch",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8141)
                    });
            });

            modelBuilder.Entity("bob_api.Models.Order", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.Property<string>("status")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("status");

                b.HasKey("Id");

                b.ToTable("Orders");

                b.HasData(
                    new
                    {
                        Id = new Guid("c4ddb064-2b37-4600-b680-12deb24a94db"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8191),
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8191),
                        UserId = new Guid("bdbc33e0-2930-41fa-9f39-1552386d177f"),
                        status = "Pending"
                    });
            });

            modelBuilder.Entity("bob_api.Models.Product", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("description");

                b.Property<string>("Image")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("image");

                b.Property<int>("Price")
                    .HasColumnType("integer")
                    .HasColumnName("price");

                b.Property<int>("Stock")
                    .HasColumnType("integer")
                    .HasColumnName("stock");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("title");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.Property<Guid?>("WishlistId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("WishlistId");

                b.ToTable("Product");

                b.HasData(
                    new
                    {
                        Id = new Guid("d32872fd-24b5-411b-bffb-1f22e71db681"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8148),
                        Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                        Image = "",
                        Price = 10,
                        Stock = 10,
                        Title = "TestBoy",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8148)
                    },
                    new
                    {
                        Id = new Guid("4bbd137c-cd9c-41e7-bd66-9c885feaa1ab"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8150),
                        Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                        Image = "",
                        Price = 15,
                        Stock = 10,
                        Title = "Test2",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8151)
                    },
                    new
                    {
                        Id = new Guid("e8f23f42-5279-4384-84ba-721279656442"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8152),
                        Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                        Image = "",
                        Price = 11,
                        Stock = 10,
                        Title = "Test3",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8152)
                    },
                    new
                    {
                        Id = new Guid("ba58055b-4139-4b3c-9036-5fcbe77156d8"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8154),
                        Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                        Image = "",
                        Price = 10,
                        Stock = 10,
                        Title = "Test4",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8154)
                    });
            });

            modelBuilder.Entity("bob_api.Models.ProductsOrder", b =>
            {
                b.Property<Guid>("OrderId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.Property<Guid>("ProductId")
                    .HasColumnType("uuid")
                    .HasColumnName("product_id");

                b.Property<int>("Quantity")
                    .HasColumnType("integer")
                    .HasColumnName("quantity");

                b.HasKey("OrderId", "ProductId");

                b.HasIndex("ProductId");

                b.ToTable("ProductOrders");

                b.HasData(
                    new
                    {
                        OrderId = new Guid("c4ddb064-2b37-4600-b680-12deb24a94db"),
                        ProductId = new Guid("d32872fd-24b5-411b-bffb-1f22e71db681"),
                        Quantity = 1
                    },
                    new
                    {
                        OrderId = new Guid("c4ddb064-2b37-4600-b680-12deb24a94db"),
                        ProductId = new Guid("4bbd137c-cd9c-41e7-bd66-9c885feaa1ab"),
                        Quantity = 3
                    });
            });

            modelBuilder.Entity("bob_api.Models.Rating", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<Guid>("ProductId")
                    .HasColumnType("uuid")
                    .HasColumnName("product_id");

                b.Property<int>("RatingValue")
                    .HasColumnType("integer")
                    .HasColumnName("rating_value");

                b.Property<string>("Review")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("review");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.ToTable("Ratings");

                b.HasData(
                    new
                    {
                        Id = new Guid("0c586465-aa64-456c-a39f-f428526bfc8f"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8196),
                        ProductId = new Guid("d32872fd-24b5-411b-bffb-1f22e71db681"),
                        RatingValue = 2,
                        Review = "This product was straight garbage cuh",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8196),
                        UserId = new Guid("bdbc33e0-2930-41fa-9f39-1552386d177f")
                    },
                    new
                    {
                        Id = new Guid("3bbc9779-5cb4-4163-b363-cb0edd6dc26a"),
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8199),
                        ProductId = new Guid("4bbd137c-cd9c-41e7-bd66-9c885feaa1ab"),
                        RatingValue = 5,
                        Review = "This product was straight fire blud",
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8200),
                        UserId = new Guid("bdbc33e0-2930-41fa-9f39-1552386d177f")
                    });
            });

            modelBuilder.Entity("bob_api.Models.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("email");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("first_name");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("last_name");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("text");

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("text");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("password");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.Property<string>("UserName")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        Id = new Guid("bdbc33e0-2930-41fa-9f39-1552386d177f"),
                        AccessFailedCount = 0,
                        ConcurrencyStamp = "04a9a43c-0e64-4745-8948-b063498423fe",
                        CreatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8158),
                        Email = "test@test.no",
                        EmailConfirmed = false,
                        FirstName = "Test",
                        LastName = "Test",
                        LockoutEnabled = false,
                        Password = "password",
                        PhoneNumberConfirmed = false,
                        SecurityStamp = "415177c6-0b68-49cb-82c2-04d03dd1f6e5",
                        TwoFactorEnabled = false,
                        UpdatedAt = new DateTime(2024, 3, 20, 9, 17, 54, 923, DateTimeKind.Utc).AddTicks(8158)
                    });
            });

            modelBuilder.Entity("bob_api.Models.Wishlist", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Wishlist");
            });

            modelBuilder.Entity("CategoryProduct", b =>
            {
                b.HasOne("bob_api.Models.Category", null)
                    .WithMany()
                    .HasForeignKey("CategoriesId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("bob_api.Models.Product", null)
                    .WithMany()
                    .HasForeignKey("ProductsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("bob_api.Models.Product", b =>
            {
                b.HasOne("bob_api.Models.Wishlist", null)
                    .WithMany("Products")
                    .HasForeignKey("WishlistId");
            });

            modelBuilder.Entity("bob_api.Models.ProductsOrder", b =>
            {
                b.HasOne("bob_api.Models.Order", "Order")
                    .WithMany("ProductOrders")
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("bob_api.Models.Product", "Product")
                    .WithMany("ProductsOrders")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Order");

                b.Navigation("Product");
            });

            modelBuilder.Entity("bob_api.Models.Wishlist", b =>
            {
                b.HasOne("bob_api.Models.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

            modelBuilder.Entity("bob_api.Models.Order", b =>
            {
                b.Navigation("ProductOrders");
            });

            modelBuilder.Entity("bob_api.Models.Product", b =>
            {
                b.Navigation("ProductsOrders");
            });

            modelBuilder.Entity("bob_api.Models.Wishlist", b =>
            {
                b.Navigation("Products");
            });
#pragma warning restore 612, 618
        }
    }
}