// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bob_api.Data;

#nullable disable

namespace bob_api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
            {
                b.Property<Guid>("CategoriesId")
                    .HasColumnType("uuid");

                b.Property<Guid>("ProductsId")
                    .HasColumnType("uuid");

                b.HasKey("CategoriesId", "ProductsId");

                b.HasIndex("ProductsId");

                b.ToTable("product_categories", (string)null);
            });

            modelBuilder.Entity("bob_api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9eba0f71-6082-475b-bc4d-1b352e4d5045"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2514),
                            Name = "Girl",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2515)
                        },
                        new
                        {
                            Id = new Guid("a2e8b701-9f0b-4177-8a0e-8207bb800491"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2473),
                            Name = "Boy",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2475)
                        },
                        new
                        {
                            Id = new Guid("e4302f11-3e56-4e30-9156-dd10fd0ef10e"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2517),
                            Name = "BTS",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2517)
                        },
                        new
                        {
                            Id = new Guid("7b8fd68a-7cf9-48d6-8834-e78ed35b9552"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2519),
                            Name = "StrayKids",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2519)
                        },
                        new
                        {
                            Id = new Guid("d5b71eef-c3a6-405d-bc3c-1f75740c557f"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2520),
                            Name = "BigBang",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2521)
                        },
                        new
                        {
                            Id = new Guid("5c13feda-8634-47c0-9730-4b0931fda647"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2522),
                            Name = "Ateez",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2523)
                        },
                        new
                        {
                            Id = new Guid("58ab235a-6a2c-4256-b0a9-372a5e677f27"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2525),
                            Name = "Blackpink",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2525)
                        },
                        new
                        {
                            Id = new Guid("b2276c34-310b-4cc7-88bd-dfe3979f81ea"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2526),
                            Name = "Red Velvet",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2527)
                        },
                        new
                        {
                            Id = new Guid("d8687c5c-22c6-4ecb-9e3c-1a56b77bbeaa"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2528),
                            Name = "LE SSERAFIM.",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2529)
                        },
                        new
                        {
                            Id = new Guid("fa8692c3-fd1b-44f5-af78-6ae8ddec070a"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2533),
                            Name = "(G)I-DLE.",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2533)
                        },
                        new
                        {
                            Id = new Guid("41d87680-71b4-4e33-b75e-0848249c347f"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2535),
                            Name = "LightStick",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2535)
                        },
                        new
                        {
                            Id = new Guid("ae832498-682d-4ed0-b652-4c0ee7c52d0a"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2537),
                            Name = "Jewelry",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2537)
                        },
                        new
                        {
                            Id = new Guid("787637d4-a174-4c39-8370-b811f7ea172e"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2539),
                            Name = "Merch",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2539)
                        });
                });

            modelBuilder.Entity("bob_api.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77ea01de-bb92-4496-bef3-e67ca4358d82"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2624),
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2624),
                            UserId = new Guid("4058a2c1-a40a-49ca-b6a0-896ea5af668c"),
                            status = "Pending"
                        });
                });

            modelBuilder.Entity("bob_api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("WishlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WishlistId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3ffdd68-55a0-42ae-b396-7b4a65248363"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2551),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            Image = "",
                            Price = 10,
                            Stock = 10,
                            Title = "TestBoy",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2551)
                        },
                        new
                        {
                            Id = new Guid("ef5f342e-e838-42a7-bfe0-803854e04aa1"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2556),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            Image = "",
                            Price = 15,
                            Stock = 10,
                            Title = "Test2",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2557)
                        },
                        new
                        {
                            Id = new Guid("3d4149d6-f21c-46b7-9c5f-cb02d3752cdc"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2560),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            Image = "",
                            Price = 11,
                            Stock = 10,
                            Title = "Test3",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2560)
                        },
                        new
                        {
                            Id = new Guid("f56f0b79-ba67-47c2-b4a7-2b605dba297a"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2562),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            Image = "",
                            Price = 10,
                            Stock = 10,
                            Title = "Test4",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2563)
                        });
                });

            modelBuilder.Entity("bob_api.Models.ProductsOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("77ea01de-bb92-4496-bef3-e67ca4358d82"),
                            ProductId = new Guid("c3ffdd68-55a0-42ae-b396-7b4a65248363"),
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = new Guid("77ea01de-bb92-4496-bef3-e67ca4358d82"),
                            ProductId = new Guid("ef5f342e-e838-42a7-bfe0-803854e04aa1"),
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("bob_api.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer")
                        .HasColumnName("rating_value");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0e14d54-0a13-4f9b-a810-80f68804ba9d"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2629),
                            ProductId = new Guid("c3ffdd68-55a0-42ae-b396-7b4a65248363"),
                            RatingValue = 2,
                            Review = "This product was straight garbage cuh",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2629),
                            UserId = new Guid("4058a2c1-a40a-49ca-b6a0-896ea5af668c")
                        },
                        new
                        {
                            Id = new Guid("7872715f-42d3-4383-a088-022f3493834e"),
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2634),
                            ProductId = new Guid("ef5f342e-e838-42a7-bfe0-803854e04aa1"),
                            RatingValue = 5,
                            Review = "This product was straight fire blud",
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2634),
                            UserId = new Guid("4058a2c1-a40a-49ca-b6a0-896ea5af668c")
                        });
                });

            modelBuilder.Entity("bob_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4058a2c1-a40a-49ca-b6a0-896ea5af668c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fe43c24-9021-418d-947a-419f36a9b8af",
                            CreatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2570),
                            Email = "test@test.no",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "Test",
                            LockoutEnabled = false,
                            Password = "password",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa497da1-e46c-411f-8446-415d236fc527",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 3, 20, 12, 8, 50, 565, DateTimeKind.Utc).AddTicks(2570)
                        });
                });

            modelBuilder.Entity("bob_api.Models.Wishlist", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Wishlist");
            });

            modelBuilder.Entity("CategoryProduct", b =>
            {
                b.HasOne("bob_api.Models.Category", null)
                    .WithMany()
                    .HasForeignKey("CategoriesId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("bob_api.Models.Product", null)
                    .WithMany()
                    .HasForeignKey("ProductsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("bob_api.Models.Order", b =>
                {
                    b.HasOne("bob_api.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bob_api.Models.Product", b =>
            {
                b.HasOne("bob_api.Models.Wishlist", null)
                    .WithMany("Products")
                    .HasForeignKey("WishlistId");
            });

            modelBuilder.Entity("bob_api.Models.ProductsOrder", b =>
            {
                b.HasOne("bob_api.Models.Order", "Order")
                    .WithMany("ProductOrders")
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("bob_api.Models.Product", "Product")
                    .WithMany("ProductsOrders")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Order");

                b.Navigation("Product");
            });

            modelBuilder.Entity("bob_api.Models.Wishlist", b =>
            {
                b.HasOne("bob_api.Models.User", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

            modelBuilder.Entity("bob_api.Models.Order", b =>
            {
                b.Navigation("ProductOrders");
            });

            modelBuilder.Entity("bob_api.Models.Product", b =>
            {
                b.Navigation("ProductsOrders");
            });

            modelBuilder.Entity("bob_api.Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("bob_api.Models.Wishlist", b =>
            {
                b.Navigation("Products");
            });
#pragma warning restore 612, 618
        }
    }
}